"""
Professional Business Dashboard - Finansiell Analys
"""
import streamlit as st
import pandas as pd
import numpy as np

try:
    import plotly.express as px
    import plotly.graph_objects as go
    from plotly.subplots import make_subplots
    PLOTLY_AVAILABLE = True
except ImportError:
    st.error("‚ùå Plotly √§r inte installerat. Installera med: pip install plotly")
    PLOTLY_AVAILABLE = False
    
import sys
import os

# Add current directory to Python path for deployment compatibility
try:
    # When running as a script, __file__ is available
    current_dir = os.path.dirname(os.path.abspath(__file__))
except NameError:
    # When running with exec() or in some deployment contexts
    current_dir = os.getcwd()

if current_dir not in sys.path:
    sys.path.insert(0, current_dir)

from financial_analyzer import FinancialAnalyzer

# Konfiguration f√∂r professionell look
st.set_page_config(
    page_title="Finansiell Dashboard",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS f√∂r business look
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: 700;
        color: #1f4e79;
        text-align: center;
        margin-bottom: 2rem;
        padding: 1rem;
        background: linear-gradient(90deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 10px;
        border-left: 5px solid #1f4e79;
    }
    .metric-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-left: 4px solid #28a745;
        margin-bottom: 1rem;
    }
    .metric-value {
        font-size: 2rem;
        font-weight: 700;
        color: #1f4e79;
    }
    .metric-label {
        font-size: 0.9rem;
        color: #6c757d;
        text-transform: uppercase;
        font-weight: 500;
    }
    .section-header {
        font-size: 1.5rem;
        font-weight: 600;
        color: #1f4e79;
        margin: 2rem 0 1rem 0;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #e9ecef;
    }
    .sidebar .sidebar-content {
        background: #f8f9fa;
    }
</style>
""", unsafe_allow_html=True)

def check_password():
    """Secure password check using Streamlit secrets"""
    def password_entered():
        # H√§mta anv√§ndarnamn och l√∂senord fr√•n secrets (med fallback f√∂r lokal utveckling)
        try:
            correct_username = st.secrets["auth"]["username"]
            correct_password = st.secrets["auth"]["password"]
        except:
            # Fallback f√∂r lokal utveckling
            correct_username = "Admin"
            correct_password = "Sention1!"
        
        entered_username = st.session_state.get("username_input", "").strip()
        entered_password = st.session_state.get("password_input", "")
        
        if entered_username == correct_username and entered_password == correct_password:
            st.session_state["password_correct"] = True
            st.session_state["authenticated_username"] = entered_username
            del st.session_state["password_input"]
        else:
            st.session_state["password_correct"] = False

    if "password_correct" not in st.session_state:
        st.markdown("## üîê Inloggning")
        st.text_input("Anv√§ndarnamn", key="username_input", placeholder="Ange anv√§ndarnamn")
        st.text_input("L√∂senord", type="password", on_change=password_entered, key="password_input")
        return False
    elif not st.session_state["password_correct"]:
        st.markdown("## üîê Inloggning")
        st.text_input("Anv√§ndarnamn", key="username_input", placeholder="Ange anv√§ndarnamn")
        st.text_input("L√∂senord", type="password", on_change=password_entered, key="password_input")
        st.error("‚ùå Felaktigt anv√§ndarnamn eller l√∂senord")
        return False
    else:
        return True

def load_financial_data():
    """Laddar finansiell data"""
    try:
        analyzer = FinancialAnalyzer()
        return analyzer
    except Exception as e:
        st.error(f"Fel vid laddning av data: {e}")
        return None

def convert_excel_value(value):
    """Konverterar Excel-v√§rde till nummer - hanterar svenska format"""
    if pd.isna(value) or value == "None" or value == "":
        return 0
    try:
        # Konvertera till string
        val_str = str(value).strip()
        
        # Ta bort eventuella mellanslag (tusentalseparatorer)
        val_str = val_str.replace(' ', '')
        
        # Ers√§tt komma med punkt f√∂r decimaler
        val_str = val_str.replace(',', '.')
        
        return float(val_str)
    except:
        return 0

def get_monthly_data(analyzer, sheet_name):
    """H√§mtar m√•nadsdata DIREKT fr√•n SUMMA-raderna och BER√ÑKNAT RESULTAT fr√•n Excel"""
    raw_data = analyzer.get_raw_data(sheet_name)
    if raw_data is None:
        return None, None, None
    
    months = ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec']
    monthly_revenue = []
    monthly_expenses = []
    monthly_net_result = []
    
    # Hitta relevanta rader
    revenue_row = None
    expense_row = None
    net_result_row = None
    
    for idx, row in raw_data.iterrows():
        category = str(row.iloc[0]) if not pd.isna(row.iloc[0]) else ""
        
        # Hitta int√§ktsraden - flexibel matchning
        if any(keyword in category.upper() for keyword in ['SUMMA R√ñRELSENS INT√ÑKTER', 'SUMMA NETTOOMS√ÑTTNING']):
            revenue_row = row
        elif 'SUMMA R√ñRELSENS KOSTNADER' in category:
            expense_row = row
        elif 'BER√ÑKNAT RESULTAT' in category:
            net_result_row = row
    
    # L√§s m√•nadsdata fr√•n raderna
    for month in months:
        # Hitta m√•nadskolumn
        month_col_idx = None
        for col_idx, col_name in enumerate(raw_data.columns):
            if str(col_name).strip() == month:
                month_col_idx = col_idx
                break
        
        if month_col_idx is not None:
            # L√§s fr√•n SUMMA R√ñRELSENS INT√ÑKTER (alltid positivt)
            if revenue_row is not None:
                revenue_val = convert_excel_value(revenue_row.iloc[month_col_idx])
                monthly_revenue.append(abs(revenue_val))
            else:
                monthly_revenue.append(0)
            
            # L√§s fr√•n SUMMA R√ñRELSENS KOSTNADER (beh√•ll negativt tecken)
            if expense_row is not None:
                expense_val = convert_excel_value(expense_row.iloc[month_col_idx])
                monthly_expenses.append(expense_val)
            else:
                monthly_expenses.append(0)
            
            # L√§s fr√•n BER√ÑKNAT RESULTAT (direkt fr√•n Excel)
            if net_result_row is not None:
                net_val = convert_excel_value(net_result_row.iloc[month_col_idx])
                monthly_net_result.append(net_val)
        else:
            monthly_net_result.append(0)
    else:
            monthly_revenue.append(0)
            monthly_expenses.append(0)
            monthly_net_result.append(0)
    
    return monthly_revenue, monthly_expenses, monthly_net_result

def create_multi_company_comparison(analyzer, selected_sheets):
    """Skapar j√§mf√∂relsediagram f√∂r flera f√∂retag"""
    import plotly.graph_objects as go
    from plotly.subplots import make_subplots
    
    fig = go.Figure()
    months = ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec']
    
    colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']
    
    for i, sheet in enumerate(selected_sheets):
        monthly_revenue, monthly_expenses, monthly_net_result = get_monthly_data(analyzer, sheet)
        
        if monthly_revenue is None:
            continue
            
        color = colors[i % len(colors)]
        
        # L√§gg till nettoresultat f√∂r varje f√∂retag
        fig.add_trace(go.Scatter(
            x=months,
            y=monthly_net_result,
            mode='lines+markers',
            name=f'{sheet} - Nettoresultat',
            line=dict(color=color, width=2),
            marker=dict(size=6),
            hovertemplate=f'<b>{sheet}</b><br>%{{x}}<br>Nettoresultat: %{{y:,.1f}} tSEK<extra></extra>'
        ))
    
    fig.update_layout(
        title=dict(text=f'Nettoresultat J√§mf√∂relse - {len(selected_sheets)} F√∂retag', font=dict(size=20, color='#1f4e79')),
        xaxis_title='M√•nad',
        yaxis_title='Nettoresultat (tSEK)',
        hovermode='x unified',
        template='plotly_white',
        height=500,
        showlegend=True,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        )
    )
    
    return fig

def get_yearly_totals_from_excel(analyzer, sheet_name):
    """H√§mtar √•rssummor DIREKT fr√•n Excel's SUMMA-kolumn - ENKEL och ROBUST"""
    raw_data = analyzer.get_raw_data(sheet_name)
    if raw_data is None:
        return 0, 0, 0
    
    # Hitta Totalt-kolumnen
    summa_col_idx = None
    for col_idx, col_name in enumerate(raw_data.columns):
        if str(col_name).strip() == 'Totalt':
            summa_col_idx = col_idx
            break
    
    if summa_col_idx is None:
        summa_col_idx = len(raw_data.columns) - 1
    
    # Hitta rader med ENKEL matching
    revenue_total = 0
    expense_total = 0
    net_result_total = 0
    
    for idx, row in raw_data.iterrows():
        category = str(row.iloc[0]) if not pd.isna(row.iloc[0]) else ""
        
        # Flexibel matchning f√∂r int√§kter - hitta r√§tt rad oberoende av format
        if any(keyword in category.upper() for keyword in ['SUMMA R√ñRELSENS INT√ÑKTER', 'SUMMA NETTOOMS√ÑTTNING']):
            revenue_total = convert_excel_value(row.iloc[summa_col_idx])
        elif 'SUMMA R√ñRELSENS KOSTNADER' in category:
            expense_total = convert_excel_value(row.iloc[summa_col_idx])
        elif 'BER√ÑKNAT RESULTAT' in category:
            net_result_total = convert_excel_value(row.iloc[summa_col_idx])
    
    return revenue_total, expense_total, net_result_total

def create_multi_company_bar_chart(analyzer, selected_sheets):
    """Skapar stapeldiagram f√∂r flera f√∂retag"""
    import plotly.graph_objects as go
    
    companies = []
    revenues = []
    expenses = []
    net_results = []
    
    for sheet in selected_sheets:
        # L√§s DIREKT fr√•n Excel's SUMMA-kolumn
        total_revenue, total_expenses, net_result = get_yearly_totals_from_excel(analyzer, sheet)
        
        # Acceptera alla f√∂retag, √§ven de med 0-v√§rden
        companies.append(sheet)
        revenues.append(total_revenue if total_revenue is not None else 0)
        expenses.append(total_expenses if total_expenses is not None else 0)
        net_results.append(net_result if net_result is not None else 0)
    
    if not companies:
        return None
    
    fig = go.Figure()
    
    # Int√§kter (positiva staplar)
    fig.add_trace(go.Bar(
        x=companies,
        y=revenues,
        name='Int√§kter',
        marker_color='#28a745',
        hovertemplate='<b>%{x}</b><br>Int√§kter: %{y:,.1f} tSEK<extra></extra>'
    ))
    
    # Kostnader (negativa staplar)
    fig.add_trace(go.Bar(
        x=companies,
        y=expenses,
        name='Kostnader',
        marker_color='#dc3545',
        hovertemplate='<b>%{x}</b><br>Kostnader: %{y:,.1f} tSEK<extra></extra>'
    ))
    
    # Nettoresultat (bl√• staplar)
    fig.add_trace(go.Bar(
        x=companies,
        y=net_results,
        name='Nettoresultat',
        marker_color='#007bff',
        hovertemplate='<b>%{x}</b><br>Nettoresultat: %{y:,.1f} tSEK<extra></extra>'
    ))
    
    fig.update_layout(
        title=dict(text='F√∂retagsj√§mf√∂relse - Finansiell √ñversikt', font=dict(size=20, color='#1f4e79')),
        xaxis_title='F√∂retag/√Ör',
        yaxis_title='Belopp (tSEK)',
        barmode='group',
        template='plotly_white',
        height=500,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        )
    )
    
    return fig

def display_multi_company_kpis(analyzer, selected_sheets):
    """Visar KPI-sammanfattning f√∂r flera f√∂retag"""
    st.markdown('<div class="section-header">üìã KPI Sammanfattning</div>', unsafe_allow_html=True)
    
    company_data = []
    
    for sheet in selected_sheets:
        # L√§s DIREKT fr√•n Excel's SUMMA-kolumn
        total_revenue, total_expenses, net_result = get_yearly_totals_from_excel(analyzer, sheet)
        
        # Inkludera alla f√∂retag, √§ven de med 0-v√§rden f√∂r att visa alla
            
        # S√§kerst√§ll r√§tt tecken
        total_revenue = abs(total_revenue) if total_revenue else 0
        total_expenses = total_expenses if total_expenses else 0  # Beh√•ll negativt fr√•n Excel
        net_result = net_result if net_result else 0
        
        profit_margin = (net_result / total_revenue * 100) if total_revenue > 0 else 0
        
        company_data.append({
            'F√∂retag/√Ör': sheet,
            'Totala Int√§kter (tSEK)': f"{total_revenue:,.1f}",
            'Totala Kostnader (tSEK)': f"{total_expenses:,.1f}",
            'Nettoresultat (tSEK)': f"{net_result:,.1f}",
            'Vinstmarginal (%)': f"{profit_margin:.1f}%"
        })
    
    if company_data:
        df = pd.DataFrame(company_data)
        st.dataframe(df, use_container_width=True)

def create_monthly_line_chart(monthly_revenue, monthly_expenses, monthly_net_result):
    """Skapar m√•nadsvis linjediagram"""
    months = ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec']
    
    fig = go.Figure()
    
    # Int√§kter
    fig.add_trace(go.Scatter(
        x=months,
        y=monthly_revenue,
        mode='lines+markers',
        name='Int√§kter',
        line=dict(color='#28a745', width=3),
        marker=dict(size=8),
        hovertemplate='<b>%{x}</b><br>Int√§kter: %{y:,.1f} tSEK<extra></extra>'
    ))
    
    # Kostnader
    fig.add_trace(go.Scatter(
        x=months,
        y=monthly_expenses,
        mode='lines+markers',
        name='Kostnader',
        line=dict(color='#dc3545', width=3),
        marker=dict(size=8),
        hovertemplate='<b>%{x}</b><br>Kostnader: %{y:,.1f} tSEK<extra></extra>'
    ))
    
    # Nettoresultat (direkt fr√•n Excel BER√ÑKNAT RESULTAT)
    fig.add_trace(go.Scatter(
        x=months,
        y=monthly_net_result,
        mode='lines+markers',
        name='Nettoresultat',
        line=dict(color='#007bff', width=3, dash='dot'),
        marker=dict(size=8),
        hovertemplate='<b>%{x}</b><br>Nettoresultat: %{y:,.1f} tSEK<extra></extra>'
    ))
    
    fig.update_layout(
        title=dict(text='M√•nadsvis Finansiell Utveckling', font=dict(size=20, color='#1f4e79')),
        xaxis_title='M√•nad',
        yaxis_title='Belopp (tSEK)',
        template='plotly_white',
        height=500,
        hovermode='x unified',
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        )
    )
    
    return fig

def create_monthly_bar_chart(monthly_revenue, monthly_expenses, monthly_net_result):
    """Skapar stapeldiagram f√∂r m√•nads√∂versikt"""
    import plotly.graph_objects as go
    
    months = ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec']
    
    fig = go.Figure()
    
    # Int√§kter (positiva staplar)
    fig.add_trace(go.Bar(
        x=months,
        y=monthly_revenue,
        name='Int√§kter',
        marker_color='#28a745',
        hovertemplate='<b>%{x}</b><br>Int√§kter: %{y:,.1f} tSEK<extra></extra>'
    ))
    
    # Kostnader (negativa staplar)
    fig.add_trace(go.Bar(
        x=months,
        y=monthly_expenses,
        name='Kostnader',
        marker_color='#dc3545',
        hovertemplate='<b>%{x}</b><br>Kostnader: %{y:,.1f} tSEK<extra></extra>'
    ))
    
    # Nettoresultat (bl√• staplar)
    fig.add_trace(go.Bar(
        x=months,
        y=monthly_net_result,
        name='Nettoresultat',
        marker_color='#007bff',
        hovertemplate='<b>%{x}</b><br>Nettoresultat: %{y:,.1f} tSEK<extra></extra>'
    ))
    
    fig.update_layout(
        title=dict(text='M√•nadsvis Finansiell √ñversikt', font=dict(size=20, color='#1f4e79')),
        xaxis_title='M√•nad',
        yaxis_title='Belopp (tSEK)',
        barmode='group',
        template='plotly_white',
        height=400,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        )
    )
    
    return fig

def create_revenue_detail_chart(analyzer, sheet_name):
    """Skapar detaljerat diagram f√∂r int√§ktskategorier"""
    import plotly.graph_objects as go
    
    raw_data = analyzer.get_raw_data(sheet_name)
    if raw_data is None:
        return None
    
    # Hitta int√§ktskategorier (rader som inte √§r SUMMA och har positiva v√§rden)
    revenue_categories = []
    revenue_totals = []
    
    # Hitta SUMMA-kolumnen
    summa_col_idx = len(raw_data.columns) - 1
    
    # Innan SUMMA R√ñRELSENS INT√ÑKTER = int√§kter, efter = kostnader
    found_revenue_summa = False
    
    for idx, row in raw_data.iterrows():
        category = str(row.iloc[0]) if not pd.isna(row.iloc[0]) else ""
        
        # Kolla om vi hittat int√§ktsraden (flexibel matchning)
        if any(keyword in category.upper() for keyword in ['SUMMA R√ñRELSENS INT√ÑKTER', 'SUMMA NETTOOMS√ÑTTNING']):
            found_revenue_summa = True
            continue
            
        # Skippa SUMMA-rader och tomma kategorier
        if 'SUMMA' in category.upper() or 'BER√ÑKNAT' in category.upper() or category.strip() == "":
            continue
            
        # L√§s v√§rdet fr√•n SUMMA-kolumnen
        total_val = convert_excel_value(row.iloc[summa_col_idx])
        
        # Bara int√§kter (innan SUMMA R√ñRELSENS INT√ÑKTER och positiva v√§rden)
        if not found_revenue_summa and total_val > 10:  # Bara kategorier √∂ver 10 tSEK
            # Rensa och f√∂rkorta kategorinamnet
            clean_category = category.strip()[:40]  # Lite l√§ngre f√∂r b√§ttre l√§sbarhet
            revenue_categories.append(clean_category)
            revenue_totals.append(total_val)
    
    if not revenue_categories:
        return None
    
    # Sortera efter storlek
    sorted_data = sorted(zip(revenue_categories, revenue_totals), key=lambda x: x[1], reverse=True)
    revenue_categories, revenue_totals = zip(*sorted_data)
    
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        y=revenue_categories,
        x=revenue_totals,
        orientation='h',
        marker_color='#28a745',
        hovertemplate='<b>%{y}</b><br>Int√§kt: %{x:,.1f} tSEK<extra></extra>'
    ))
    
    fig.update_layout(
        title=dict(text='Int√§ktskategorier', font=dict(size=18, color='#1f4e79')),
        xaxis_title='Belopp (tSEK)',
        yaxis_title='Kategori',
        template='plotly_white',
        height=400,
        margin=dict(l=150)
    )
    
    return fig

def create_expense_detail_chart(analyzer, sheet_name):
    """Skapar detaljerat diagram f√∂r kostnadskategorier"""
    import plotly.graph_objects as go
    
    raw_data = analyzer.get_raw_data(sheet_name)
    if raw_data is None:
        return None
    
    # Hitta kostnadskategorier (rader som inte √§r SUMMA och har negativa v√§rden)
    expense_categories = []
    expense_totals = []
    
    # Hitta SUMMA-kolumnen
    summa_col_idx = len(raw_data.columns) - 1
    
    # Efter SUMMA R√ñRELSENS INT√ÑKTER och innan BER√ÑKNAT RESULTAT = kostnader
    found_revenue_summa = False
    found_result = False
    
    for idx, row in raw_data.iterrows():
        category = str(row.iloc[0]) if not pd.isna(row.iloc[0]) else ""
        
        # Kolla om vi hittat int√§ktsraden (flexibel matchning)
        if any(keyword in category.upper() for keyword in ['SUMMA R√ñRELSENS INT√ÑKTER', 'SUMMA NETTOOMS√ÑTTNING']):
            found_revenue_summa = True
            continue
        
        # Kolla om vi hittat BER√ÑKNAT RESULTAT (slutar kostnader)
        if 'BER√ÑKNAT RESULTAT' in category.upper():
            found_result = True
            continue
            
        # Skippa SUMMA-rader och tomma kategorier
        if 'SUMMA' in category.upper() or category.strip() == "":
            continue
        
        # L√§s v√§rdet fr√•n SUMMA-kolumnen
        total_val = convert_excel_value(row.iloc[summa_col_idx])
        
        # Bara kostnader (efter SUMMA R√ñRELSENS INT√ÑKTER och innan BER√ÑKNAT RESULTAT)
        if found_revenue_summa and not found_result and abs(total_val) > 10:  # Bara kategorier √∂ver 10 tSEK
            # Rensa och f√∂rkorta kategorinamnet
            clean_category = category.strip()[:40]  # Lite l√§ngre f√∂r b√§ttre l√§sbarhet
            expense_categories.append(clean_category)
            expense_totals.append(abs(total_val))  # Visa som positiva v√§rden f√∂r b√§ttre visualisering
    
    if not expense_categories:
        return None
    
    # Sortera efter storlek
    sorted_data = sorted(zip(expense_categories, expense_totals), key=lambda x: x[1], reverse=True)
    expense_categories, expense_totals = zip(*sorted_data)
    
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        y=expense_categories,
        x=expense_totals,
        orientation='h',
        marker_color='#dc3545',
        hovertemplate='<b>%{y}</b><br>Kostnad: %{x:,.1f} tSEK<extra></extra>'
    ))
    
    fig.update_layout(
        title=dict(text='Kostnadskategorier', font=dict(size=18, color='#1f4e79')),
        xaxis_title='Belopp (tSEK)',
        yaxis_title='Kategori',
        template='plotly_white',
        height=400,
        margin=dict(l=150)
    )
    
    return fig

def create_category_pie_chart(analyzer, sheet_name):
    """Skapar cirkeldiagram f√∂r kategorier"""
    raw_data = analyzer.get_raw_data(sheet_name)
    if raw_data is None:
        return None
    
    categories = []
    values = []
    
    revenue_keywords = ['Nettooms√§ttning', 'F√∂rs√§ljning', 'Membership', 'Int√§kter']
    
    for idx, row in raw_data.iterrows():
        if idx == 0:
            continue
            
        category = str(row.iloc[0]) if not pd.isna(row.iloc[0]) else ""
        
        # Hitta Total-kolumn
        total_value = 0
        for col_idx, col_name in enumerate(raw_data.columns):
            if 'total' in str(col_name).lower():
                total_value = convert_excel_value(row.iloc[col_idx])
                break
        
        # Bara visa int√§ktskategorier med v√§rde > 0
        is_revenue = any(keyword.lower() in category.lower() for keyword in revenue_keywords)
        if is_revenue and total_value > 0:
            categories.append(category)
            values.append(total_value)
    
    if not categories:
        return None
    
    fig = go.Figure(data=[go.Pie(
        labels=categories,
        values=values,
        hole=0.4,
        textinfo='label+percent',
        textposition='outside',
        marker=dict(colors=px.colors.qualitative.Set3)
    )])
    
    fig.update_layout(
        title=dict(text='Int√§ktsf√∂rdelning per Kategori', font=dict(size=20, color='#1f4e79')),
        height=500,
        showlegend=True
    )
    
    return fig

def create_heatmap(monthly_revenue, monthly_expenses):
    """Skapar heatmap f√∂r aktivitet"""
    months = ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec']
    
    # Skapa data f√∂r heatmap
    data = [
        monthly_revenue,
        monthly_expenses,
        [rev - exp for rev, exp in zip(monthly_revenue, monthly_expenses)]
    ]
    
    fig = go.Figure(data=go.Heatmap(
        z=data,
        x=months,
        y=['Int√§kter', 'Kostnader', 'Nettoresultat'],
        colorscale='RdYlGn',
        text=[[f'{val:,.0f}' for val in row] for row in data],
        texttemplate='%{text} SEK',
        textfont={"size": 12},
        hovertemplate='<b>%{y}</b><br>%{x}: %{z:,.0f} SEK<extra></extra>'
    ))
    
    fig.update_layout(
        title=dict(text='Finansiell Aktivitetsheatmap', font=dict(size=20, color='#1f4e79')),
        height=400
    )
    
    return fig

def display_kpi_cards(analyzer, sheet_name):
    """Visar KPI-kort - l√§ser direkt fr√•n Excel's SUMMA-kolumn"""
    # L√§s DIREKT fr√•n Excel's SUMMA-kolumn
    total_revenue, total_expenses, net_result = get_yearly_totals_from_excel(analyzer, sheet_name)
    
    if total_revenue is None:
        total_revenue, total_expenses, net_result = 0, 0, 0
    
    profit_margin = (net_result / total_revenue * 100) if total_revenue > 0 else 0
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-value">{total_revenue:,.1f} tSEK</div>
            <div class="metric-label">Totala Int√§kter</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-value">{total_expenses:,.1f} tSEK</div>
            <div class="metric-label">Totala Kostnader</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        color = "#28a745" if net_result >= 0 else "#dc3545"
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-value" style="color: {color}">{net_result:,.1f} tSEK</div>
            <div class="metric-label">Nettoresultat</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-value">{profit_margin:.1f}%</div>
            <div class="metric-label">Vinstmarginal</div>
        </div>
        """, unsafe_allow_html=True)

def display_raw_data_editor(analyzer, sheet_name):
    """Visar r√•data fr√•n Excel med redigeringsm√∂jligheter"""
    st.markdown('<div class="section-header">üìä R√•data Viewer & Editor</div>', unsafe_allow_html=True)
    
    raw_data = analyzer.get_raw_data(sheet_name)
    if raw_data is None:
        st.error("‚ùå Kunde inte ladda r√•data f√∂r vald analys.")
        return
    
    st.markdown(f"**Visar data f√∂r:** {sheet_name}")
    
    # Skapa en kopia av data f√∂r redigering
    if f'edited_data_{sheet_name}' not in st.session_state:
        st.session_state[f'edited_data_{sheet_name}'] = raw_data.copy()
        # L√§gg till kolumner f√∂r redigering
        st.session_state[f'edited_data_{sheet_name}']['Typ'] = 'Auto'
        st.session_state[f'edited_data_{sheet_name}']['Exkludera'] = False
        
        # Automatisk kategorisering baserat p√• Excel-struktur
        auto_categorize_rows(st.session_state[f'edited_data_{sheet_name}'])
    
    edited_data = st.session_state[f'edited_data_{sheet_name}']
    
    # Filter och kontroller
    col1, col2, col3 = st.columns([2, 2, 2])
    
    with col1:
        show_all = st.checkbox("Visa alla rader", value=True, key=f"show_all_{sheet_name}")
        
    with col2:
        filter_type = st.selectbox(
            "Filtrera efter typ:",
            ["Alla", "Int√§kt", "Kostnad", "Exkluderade"],
            key=f"filter_type_{sheet_name}"
        )
    
    with col3:
        if st.button("üîÑ √Öterst√§ll √§ndringar", key=f"reset_{sheet_name}"):
            st.session_state[f'edited_data_{sheet_name}'] = raw_data.copy()
            st.session_state[f'edited_data_{sheet_name}']['Typ'] = 'Auto'
            st.session_state[f'edited_data_{sheet_name}']['Exkludera'] = False
            # Automatisk kategorisering baserat p√• Excel-struktur
            auto_categorize_rows(st.session_state[f'edited_data_{sheet_name}'])
            st.rerun()
    
    # Filtrera data baserat p√• val
    display_data = edited_data.copy()
    
    if not show_all:
        # Visa endast rader med numeriska v√§rden i m√•naderna
        months = ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec']
        mask = False
        for month in months:
            if month in display_data.columns:
                mask |= (pd.to_numeric(display_data[month], errors='coerce').fillna(0) != 0)
        display_data = display_data[mask]
    
    if filter_type == "Int√§kt":
        display_data = display_data[display_data['Typ'] == 'Int√§kt']
    elif filter_type == "Kostnad":
        display_data = display_data[display_data['Typ'] == 'Kostnad']
    elif filter_type == "Exkluderade":
        display_data = display_data[display_data['Exkludera'] == True]
    
    st.markdown(f"**Visar {len(display_data)} av {len(edited_data)} rader**")
    
    # Visa data med redigeringsm√∂jligheter
    if len(display_data) > 0:
        # Konfigurera kolumner f√∂r data editor
        column_config = {}
        
        # Konfigurera Typ-kolumnen
        column_config["Typ"] = st.column_config.SelectboxColumn(
            "Typ",
            help="√Ñndra om posten √§r int√§kt eller kostnad",
            options=["Auto", "Int√§kt", "Kostnad"],
            required=True,
        )
        
        # Konfigurera Exkludera-kolumnen
        column_config["Exkludera"] = st.column_config.CheckboxColumn(
            "Exkludera",
            help="Markera f√∂r att exkludera fr√•n ber√§kningar",
            default=False,
        )
        
        # Konfigurera numeriska kolumner - visa som text f√∂r att bevara exakt Excel-format
        months = ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec', 'Totalt']
        for month in months:
            if month in display_data.columns:
                column_config[month] = st.column_config.TextColumn(
                    month,
                    help=f"V√§rde f√∂r {month} (exakt som i Excel)",
                )
        
        # Data editor
        edited_df = st.data_editor(
            display_data,
            column_config=column_config,
            use_container_width=True,
            num_rows="dynamic",
            disabled=["Kategori"] if "Kategori" in display_data.columns else [],
            key=f"data_editor_{sheet_name}"
        )
        
        # Uppdatera session state med √§ndringar
        for idx in edited_df.index:
            if idx in st.session_state[f'edited_data_{sheet_name}'].index:
                st.session_state[f'edited_data_{sheet_name}'].loc[idx] = edited_df.loc[idx]
        
        # Visa sammanfattning av √§ndringar
        st.markdown('<div class="section-header">üìã √Ñndringar Sammanfattning</div>', unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            intakt_count = len(edited_df[edited_df['Typ'] == 'Int√§kt'])
            st.metric("Markerade som Int√§kt", intakt_count)
        
        with col2:
            kostnad_count = len(edited_df[edited_df['Typ'] == 'Kostnad'])
            st.metric("Markerade som Kostnad", kostnad_count)
        
        with col3:
            excluded_count = len(edited_df[edited_df['Exkludera'] == True])
            st.metric("Exkluderade", excluded_count)
        
        # Export funktionalitet
        if st.button("üíæ Exportera √§ndringar", key=f"export_{sheet_name}"):
            # H√§r kan vi l√§gga till export-funktionalitet i framtiden
            st.success("‚úÖ Export-funktionalitet kommer snart!")
    
    else:
        st.info("Inga rader att visa med aktuella filter.")

def auto_categorize_rows(data):
    """Automatisk kategorisering av rader baserat p√• Excel-struktur"""
    found_revenue_summa = False
    found_result = False
    
    for idx, row in data.iterrows():
        category = str(row.iloc[0]) if not pd.isna(row.iloc[0]) else ""
        
        # Kolla om vi hittat int√§ktsraden (flexibel matchning)
        if any(keyword in category.upper() for keyword in ['SUMMA R√ñRELSENS INT√ÑKTER', 'SUMMA NETTOOMS√ÑTTNING']):
            found_revenue_summa = True
            data.loc[idx, 'Typ'] = 'Auto'
            continue
        
        # Kolla om vi hittat BER√ÑKNAT RESULTAT (slutar kostnader)
        if 'BER√ÑKNAT RESULTAT' in category.upper():
            found_result = True
            data.loc[idx, 'Typ'] = 'Auto'
            continue
        
        # Skippa SUMMA-rader och tomma kategorier
        if 'SUMMA' in category.upper() or category.strip() == "":
            data.loc[idx, 'Typ'] = 'Auto'
            continue
        
        # Automatisk kategorisering
        if not found_revenue_summa:
            # Innan int√§ktsumman = int√§kter
            data.loc[idx, 'Typ'] = 'Int√§kt'
        elif found_revenue_summa and not found_result:
            # Efter int√§ktsumman och innan resultat = kostnader
            data.loc[idx, 'Typ'] = 'Kostnad'
        else:
            # Efter resultat
            data.loc[idx, 'Typ'] = 'Auto'

def get_editable_data_summary(analyzer, sheet_name):
    """H√§mtar sammanfattning av redigerad data"""
    if f'edited_data_{sheet_name}' not in st.session_state:
        return None
    
    edited_data = st.session_state[f'edited_data_{sheet_name}']
    
    # Filtrera bort exkluderade rader
    active_data = edited_data[edited_data['Exkludera'] == False]
    
    # R√§kna int√§kter och kostnader baserat p√• anv√§ndarens markeringar
    revenue_data = active_data[active_data['Typ'] == 'Int√§kt']
    expense_data = active_data[active_data['Typ'] == 'Kostnad']
    
    months = ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec']
    
    monthly_revenue = []
    monthly_expenses = []
    
    for month in months:
        if month in active_data.columns:
            # Summera int√§kter
            month_revenue = revenue_data[month].apply(convert_excel_value).sum()
            monthly_revenue.append(abs(month_revenue))
            
            # Summera kostnader
            month_expense = expense_data[month].apply(convert_excel_value).sum()
            monthly_expenses.append(month_expense)
        else:
            monthly_revenue.append(0)
            monthly_expenses.append(0)
    
    return monthly_revenue, monthly_expenses

def main():
    """Huvudfunktion f√∂r business dashboard"""
    
    # Kontrollera autentisering
    if not check_password():
        return
    
    # Header
    st.markdown('<div class="main-header">üìä Finansiell Dashboard</div>', unsafe_allow_html=True)
    st.markdown(f"**V√§lkommen, {st.session_state.get('authenticated_username', 'Admin')}!** üëã")
    
    # Ladda data
    with st.spinner("Laddar finansiell data..."):
        analyzer = load_financial_data()
    
    if not analyzer:
        st.error("‚ùå Kunde inte ladda finansiell data.")
        return
    
    # Sidebar
    st.sidebar.markdown("## üß≠ Navigation")
    st.sidebar.markdown("### üìà V√§lj Analystyp")
    
    # Analys typ
    analysis_type = st.sidebar.radio(
        "V√§lj analystyp:",
        ["Enskilt f√∂retag", "J√§mf√∂r f√∂retag", "Alla f√∂retag", "R√•data & Redigering"]
    )
    
    if analysis_type == "Enskilt f√∂retag":
        selected_sheet = st.sidebar.selectbox(
            "V√§lj analys:",
            analyzer.available_sheets,
            help="V√§lj vilket f√∂retag och √•r du vill analysera"
        )
        selected_sheets = [selected_sheet]
        
    elif analysis_type == "J√§mf√∂r f√∂retag":
        st.sidebar.markdown("**V√§lj f√∂retag och √•r att j√§mf√∂ra:**")
        selected_sheets = []
        
        # Skapa checkboxes f√∂r varje f√∂retag/√•r
        for sheet in analyzer.available_sheets:
            if st.sidebar.checkbox(sheet, key=f"compare_{sheet}"):
                selected_sheets.append(sheet)
        
        if len(selected_sheets) < 2:
            st.sidebar.warning("‚ö†Ô∏è V√§lj minst 2 f√∂retag/√•r f√∂r j√§mf√∂relse")
            selected_sheets = []
    
    elif analysis_type == "R√•data & Redigering":
        selected_sheet = st.sidebar.selectbox(
            "V√§lj f√∂retag/√•r f√∂r redigering:",
            analyzer.available_sheets,
            help="V√§lj vilket f√∂retag och √•r du vill se och redigera r√•data f√∂r"
        )
        selected_sheets = [selected_sheet]
            
    else:  # Alla f√∂retag
        selected_sheets = analyzer.available_sheets
        st.sidebar.info(f"üìä Visar alla {len(selected_sheets)} f√∂retag/√•r")
    
    # Kontrollera att vi har data att visa
    if not selected_sheets:
        st.info("üëà V√§lj f√∂retag och √•r i sidomenyn f√∂r att se analys")
        return
    
    # H√§mta data f√∂r valt/valda f√∂retag
    if analysis_type == "Enskilt f√∂retag":
        monthly_revenue, monthly_expenses, monthly_net_result = get_monthly_data(analyzer, selected_sheets[0])
        
        if monthly_revenue is None:
            st.error("‚ùå Kunde inte h√§mta data f√∂r vald analys.")
            return
        
        # KPI Cards
        display_kpi_cards(analyzer, selected_sheets[0])
        
        # Diagram i kolumner
        st.markdown('<div class="section-header">üìä Finansiella Diagram</div>', unsafe_allow_html=True)
        
        # Linjediagram (full bredd)
        line_chart = create_monthly_line_chart(monthly_revenue, monthly_expenses, monthly_net_result)
        st.plotly_chart(line_chart, use_container_width=True)
        
        # Stapeldiagram f√∂r √∂versikt
        bar_chart = create_monthly_bar_chart(monthly_revenue, monthly_expenses, monthly_net_result)
        st.plotly_chart(bar_chart, use_container_width=True)
        
        # Detaljerade int√§kter och utgifter
        col1, col2 = st.columns(2)
        
        with col1:
            revenue_detail_chart = create_revenue_detail_chart(analyzer, selected_sheets[0])
            if revenue_detail_chart:
                st.plotly_chart(revenue_detail_chart, use_container_width=True)
        
        with col2:
            expense_detail_chart = create_expense_detail_chart(analyzer, selected_sheets[0])
            if expense_detail_chart:
                st.plotly_chart(expense_detail_chart, use_container_width=True)
        
        # Datatabell
        st.markdown('<div class="section-header">üìã M√•nadsdata</div>', unsafe_allow_html=True)
        
        months = ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec']
        
        # S√§kerst√§ll att alla listor har samma l√§ngd (12 m√•nader)
        while len(monthly_revenue) < 12:
            monthly_revenue.append(0)
        while len(monthly_expenses) < 12:
            monthly_expenses.append(0)
        while len(monthly_net_result) < 12:
            monthly_net_result.append(0)
        
        # Trimma till 12 m√•nader om de √§r l√§ngre
        monthly_revenue = monthly_revenue[:12]
        monthly_expenses = monthly_expenses[:12]
        monthly_net_result = monthly_net_result[:12]
        
        data_table = pd.DataFrame({
            'M√•nad': months,
            'Int√§kter': [f"{val:,.1f} tSEK" for val in monthly_revenue],
            'Kostnader': [f"{val:,.1f} tSEK" for val in monthly_expenses],
            'Nettoresultat': [f"{net:,.1f} tSEK" for net in monthly_net_result]
        })
        
        st.dataframe(data_table, use_container_width=True)
    
    elif analysis_type == "R√•data & Redigering":
        # R√•data viewer och editor
        display_raw_data_editor(analyzer, selected_sheets[0])
        
        # Visa √§ven uppdaterad analys baserat p√• √§ndringar
        if f'edited_data_{selected_sheets[0]}' in st.session_state:
            editable_summary = get_editable_data_summary(analyzer, selected_sheets[0])
            if editable_summary:
                monthly_revenue, monthly_expenses = editable_summary
                monthly_net_result = [rev + exp for rev, exp in zip(monthly_revenue, monthly_expenses)]  # exp √§r redan negativ
                
                st.markdown('<div class="section-header">üìä Uppdaterad Analys (Baserat p√• Dina √Ñndringar)</div>', unsafe_allow_html=True)
                
                # Visa uppdaterade diagram
                updated_line_chart = create_monthly_line_chart(monthly_revenue, monthly_expenses, monthly_net_result)
                st.plotly_chart(updated_line_chart, use_container_width=True)
                
                # Visa uppdaterad datatabell
                st.markdown('<div class="section-header">üìã Uppdaterad M√•nadsdata</div>', unsafe_allow_html=True)
                months = ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec']
                
                updated_data_table = pd.DataFrame({
                    'M√•nad': months,
                    'Int√§kter': [f"{val:,.1f} tSEK" for val in monthly_revenue],
                    'Kostnader': [f"{val:,.1f} tSEK" for val in monthly_expenses],
                    'Nettoresultat': [f"{net:,.1f} tSEK" for net in monthly_net_result]
                })
                
                st.dataframe(updated_data_table, use_container_width=True)
    
    else:
        # Multi-f√∂retag analys
        st.markdown('<div class="section-header">üìä J√§mf√∂relse av F√∂retag</div>', unsafe_allow_html=True)
        
        # Skapa j√§mf√∂relsediagram
        comparison_chart = create_multi_company_comparison(analyzer, selected_sheets)
        if comparison_chart:
            st.plotly_chart(comparison_chart, use_container_width=True)
        
        # KPI sammanfattning f√∂r alla f√∂retag
        display_multi_company_kpis(analyzer, selected_sheets)
        
        # Diagram f√∂r multi-f√∂retag
        st.markdown('<div class="section-header">üìä Finansiella Diagram</div>', unsafe_allow_html=True)
        
        # Multi-f√∂retag stapeldiagram
        multi_bar_chart = create_multi_company_bar_chart(analyzer, selected_sheets)
        if multi_bar_chart:
            st.plotly_chart(multi_bar_chart, use_container_width=True)
        
        # Detaljerade kategorier - visa alla f√∂retag i kolumner
        st.markdown('<div class="section-header">üîç Detaljerade Kategorier</div>', unsafe_allow_html=True)
        if len(selected_sheets) > 9:
            st.info(f"üìä Visar detaljerade kategorier f√∂r alla {len(selected_sheets)} f√∂retag/√•r. Scrolla ner f√∂r att se alla.")
        
        # Visa alla f√∂retag i grupper f√∂r b√§ttre layout
        display_companies = selected_sheets  # Visa alla valda f√∂retag
        
        # Skapa kolumner f√∂r layout - max 3 per rad
        if len(display_companies) <= 3:
            cols = st.columns(len(display_companies))
            rows_needed = 1
        else:
            cols = st.columns(3)
            rows_needed = (len(display_companies) + 2) // 3  # R√§kna ut antal rader
        
        for i, sheet in enumerate(display_companies):
            col_idx = i % len(cols)
            with cols[col_idx]:
                st.markdown(f"#### {sheet}")
                
                # Int√§ktskategorier
                revenue_chart = create_revenue_detail_chart(analyzer, sheet)
                if revenue_chart:
                    revenue_chart.update_layout(height=300, title=f"Int√§kter")
                    st.plotly_chart(revenue_chart, use_container_width=True)
                
                # Kostnadskategorier  
                expense_chart = create_expense_detail_chart(analyzer, sheet)
                if expense_chart:
                    expense_chart.update_layout(height=300, title=f"Kostnader")
                    st.plotly_chart(expense_chart, use_container_width=True)
    
    # Logout knapp
    if st.sidebar.button("üö™ Logga ut"):
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.rerun()

if __name__ == "__main__":
    main()
